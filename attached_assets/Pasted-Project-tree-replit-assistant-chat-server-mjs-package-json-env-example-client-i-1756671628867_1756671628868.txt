Project tree
replit-assistant-chat/
‚îú‚îÄ server.mjs
‚îú‚îÄ package.json
‚îú‚îÄ .env.example
‚îî‚îÄ client/
   ‚îú‚îÄ index.html
   ‚îú‚îÄ vite.config.js
   ‚îú‚îÄ package.json
   ‚îî‚îÄ src/
      ‚îú‚îÄ main.jsx
      ‚îú‚îÄ App.jsx
      ‚îî‚îÄ app.css

server.mjs
import 'dotenv/config';
import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import OpenAI from 'openai';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
app.use(express.json());

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Use your Assistant ID (override with ASSISTANT_ID secret if you want)
const ASSISTANT_ID = process.env.ASSISTANT_ID || 'asst_YwWtBI8O0YtanpYBstRDQxNN';

// --- API: fresh thread per message, no memory ---
app.post('/api/chat', async (req, res) => {
  try {
    const userText = (req.body?.user ?? '').toString().trim();
    if (!userText) return res.status(400).json({ error: 'Empty message' });

    // 1) create a fresh thread
    const thread = await openai.beta.threads.create({
      messages: [{ role: 'user', content: userText }]
    });

    // 2) run it
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: ASSISTANT_ID
    });

    // 3) poll for completion (simple boilerplate)
    let status = run.status, tries = 0;
    while (status === 'queued' || status === 'in_progress') {
      await new Promise(r => setTimeout(r, 500));
      const updated = await openai.beta.threads.runs.retrieve(thread.id, run.id);
      status = updated.status;
      if (++tries > 120) break; // ~60s cap
    }

    if (status === 'requires_action') {
      return res.json({
        text:
          'The assistant requested tool calls. This minimal demo does not implement tool outputs.'
      });
    }
    if (status !== 'completed') {
      return res.status(500).json({ error: `Run ended with status: ${status}` });
    }

    // 4) get the assistant reply
    const msgs = await openai.beta.threads.messages.list(thread.id, { limit: 20 });
    const assistantMsg = msgs.data.find(m => m.role === 'assistant');

    let text = '(no reply)';
    if (assistantMsg?.content?.length) {
      text = assistantMsg.content
        .filter(p => p.type === 'text' && p.text?.value)
        .map(p => p.text.value)
        .join('\n\n')
        .trim() || text;
    }
    res.json({ text });
  } catch (err) {
    console.error('[OpenAI error]', err);
    res.status(500).json({ error: 'OpenAI error' });
  }
});

// --- Serve the React build ---
const clientDist = path.join(__dirname, 'client', 'dist');
app.use(express.static(clientDist));
app.get('*', (_, res) => res.sendFile(path.join(clientDist, 'index.html')));

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server running ‚Üí http://localhost:${port}`);
});

Root package.json
{
  "name": "replit-assistant-chat",
  "version": "1.0.0",
  "type": "module",
  "private": true,
  "scripts": {
    "setup": "npm --prefix client install && npm --prefix client run build",
    "start": "node server.mjs",
    "dev": "npm run setup && node server.mjs"
  },
  "dependencies": {
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "openai": "^4.52.0"
  }
}

.env.example
# Add in Replit Secrets (lock icon), not in repo:
# OPENAI_API_KEY=sk-...
# ASSISTANT_ID=asst_YwWtBI8O0YtanpYBstRDQxNN   # optional override

client/package.json
{
  "name": "client",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview --port 5173"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "vite": "^5.4.0"
  }
}

client/vite.config.js
import { defineConfig } from 'vite';

export default defineConfig({
  build: {
    outDir: 'dist'
  },
  server: {
    proxy: {
      '/api': 'http://localhost:3000'
    }
  }
});

client/index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0"
    />
    <title>Assistant Chat</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

client/src/main.jsx
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.jsx';
import './app.css';

createRoot(document.getElementById('root')).render(<App />);

client/src/App.jsx
import React, { useState } from 'react';

export default function App() {
  const [msgs, setMsgs] = useState([]);
  const [input, setInput] = useState('');
  const [busy, setBusy] = useState(false);

  async function send(e) {
    e?.preventDefault();
    const text = input.trim();
    if (!text || busy) return;

    setMsgs(m => [...m, { role: 'user', text }]);
    setInput('');
    setBusy(true);
    try {
      const r = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user: text })
      });
      const data = await r.json();
      setMsgs(m => [...m, { role: 'assistant', text: data.text || '(no reply)' }]);
    } catch (e) {
      setMsgs(m => [...m, { role: 'assistant', text: 'Error contacting server.' }]);
    } finally {
      setBusy(false);
    }
  }

  return (
    <div className="wrap">
      <header>
        <h1>Assistant Chat</h1>
        <p className="sub">Minimal, bright, ChatGPT-style UI</p>
      </header>

      <main className="chat" id="chat">
        {msgs.map((m, i) => (
          <div key={i} className={`msg ${m.role}`}>
            <div className="avatar">{m.role === 'user' ? 'üôÇ' : '‚ú®'}</div>
            <div className="bubble">{m.text}</div>
          </div>
        ))}
      </main>

      <form className="composer" onSubmit={send}>
        <textarea
          placeholder="Type a message..."
          value={input}
          onChange={e => setInput(e.target.value)}
          rows={2}
        />
        <button disabled={busy}>Send</button>
      </form>
    </div>
  );
}

client/src/app.css (bright, minimal, ChatGPT-ish)
:root {
  color-scheme: light;
  --bg: #f7f7fb;
  --panel: #ffffff;
  --text: #0b1220;
  --muted: #6b7280;
  --border: #e5e7eb;
  --blue: #2563eb;
  --bubble-user: #e8f0ff;
  --bubble-bot: #f3f4f6;
}

* { box-sizing: border-box; }
html, body, #root { height: 100%; }
body {
  margin: 0;
  font-family: Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif;
  color: var(--text);
  background: var(--bg);
}

.wrap {
  display: grid;
  grid-template-rows: auto 1fr auto;
  height: 100%;
  max-width: 900px;
  margin: 0 auto;
  padding: 16px;
  gap: 12px;
}

header {
  display: flex;
  align-items: baseline;
  gap: 10px;
}
h1 { font-size: 20px; margin: 0; }
.sub { margin: 0; color: var(--muted); }

.chat {
  background: var(--panel);
  border: 1px solid var(--border);
  border-radius: 14px;
  padding: 16px;
  overflow: auto;
  box-shadow: 0 2px 6px rgba(0,0,0,0.04);
}

.msg {
  display: grid;
  grid-template-columns: 36px 1fr;
  gap: 10px;
  margin: 8px 0;
  align-items: start;
}

.avatar {
  width: 36px; height: 36px;
  border-radius: 50%;
  display: grid; place-items: center;
  background: #eef2ff;
  color: #3949ab;
  border: 1px solid var(--border);
}

.bubble {
  background: var(--bubble-bot);
  border: 1px solid var(--border);
  border-radius: 12px;
  padding: 10px 12px;
  line-height: 1.5;
  white-space: pre-wrap;
}

.msg.user .avatar { background: #eff6ff; color: #1d4ed8; }
.msg.user .bubble {
  background: var(--bubble-user);
  border-color: #dbeafe;
}

.composer {
  display: grid;
  grid-template-columns: 1fr auto;
  gap: 10px;
}

textarea {
  width: 100%;
  padding: 12px 14px;
  border: 1px solid var(--border);
  border-radius: 12px;
  background: #fff;
  color: var(--text);
  resize: vertical;
  min-height: 56px;
}

button {
  padding: 0 18px;
  border: 0;
  border-radius: 12px;
  background: var(--blue);
  color: #fff;
  font-weight: 600;
  cursor: pointer;
}
button:disabled { opacity: 0.6; cursor: default; }

How to run on Replit

Create a Node.js Repl.

Add all files as above (keep structure).

Open Secrets (lock icon) and add:

OPENAI_API_KEY ‚Üí your key

(optional) ASSISTANT_ID ‚Üí asst_YwWtBI8O0YtanpYBstRDQxNN

In the Shell:

npm run dev   # builds the React client and starts the server


Open the webview URL ‚Üí chat away.

‚ÄúReplit Agent Prompt‚Äù (paste this into the Replit AI helper)

Install root deps, build the React client, then start the Node server that serves the built client and exposes POST /api/chat.
Steps:

Ensure the following secrets exist: OPENAI_API_KEY (required) and optional ASSISTANT_ID.

Run npm run dev. This runs npm --prefix client install, npm --prefix client run build, then node server.mjs.

Open the running web server at the preview URL.

To change the assistant, set ASSISTANT_ID in Secrets and restart.